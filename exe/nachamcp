#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift(File.expand_path("../lib", __dir__))
require "nachamcp"
require "fast_mcp_annotations"
require "nacha"
require "nacha/formatter"
require "openssl"

# Create an MCP server
server = FastMcp::Server.new(name: "nacha-ach-parser", version: Nachamcp::VERSION)

# Define a tool by inheriting from FastMcp::Tool
class AchParserTool < FastMcp::Tool
  tool_name "ach-parser"
  description "Parse ACH records into json or markdown"
  tags %w[ach parser json markdown banking]

  arguments do
    required(:ach_text).filled(:string).description("ACH records to parse")
    optional(:output_format).filled(:string).description("Output format for the parsed records, " \
                                                         "can be \"json\" or \"markdown\" (default: json)")
  end

  annotations(
    title: "ACH Record Parser", # Human-readable title for the tool
    read_only_hint: true,
    destructive_hint: false,
    idempotent_hint: true,
    open_world_hint: false
  )

  def formatter_options(ach_text, ach_records)
    {
      file_size: ach_text.bytesize,
      number_of_lines: ach_records.size,
      created_at: Time.now,
      modified_at: Time.now,
      checksum: Digest::SHA256.hexdigest(ach_text)
    }
  end

  def output_formatter(output_format)
    case output_format.downcase
    when "markdown", "json"
      # Use the Markdown formatter to convert records to markdown format
      output_format.downcase.to_sym
    else
      :json
    end
  end

  def call(ach_text:, output_format: "json")
    ach_file = Nacha.parse(ach_text)
    format = output_formatter(output_format)

    case format
    when :json
      ach_file.to_json
    when :markdown
      ach_file.to_markdown
    else
      raise ArgumentError, "Unsupported output format: #{format}"
    end
  rescue StandardError
    { error: "No ACH records found in the provided text." }.to_json
  end
end
# Register the tool with the server
server.register_tool(AchParserTool)

# Start the server
server.start
